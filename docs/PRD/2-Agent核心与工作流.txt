# 文档2：Agent核心与工作流需求文档
## 1. 文档标识
- 模块名称：Agent核心与工作流
- 版本：V1.0
- 依赖模块：基础架构与环境配置、模型集成、工具系统、配置系统

## 2. 模块目标
实现Agent的核心推理能力与工作流编排，支持ReAct等工作流模式，处理对话上下文与决策逻辑，确保Agent行为可配置、可观测。

## 3. 技术栈
- 核心库：langchain、langgraph
- 数据验证：pydantic（状态模型定义）
- 表达式引擎：Jinja2（条件路由）

## 4. 功能性需求
### 4.1 Agent核心能力
#### 4.1.1 对话上下文管理
- 定义`AgentState`（Pydantic模型），包含`messages`（对话历史）、`tool_calls`（工具调用记录）、`iteration_count`（迭代次数）等字段
- 支持上下文窗口大小配置（通过`max_context_tokens`控制），自动截断超量历史消息
- 会话恢复时，能从`AgentState`重建完整对话上下文

#### 4.1.2 推理与决策
- 实现`analysis_node`：调用LLM分析用户意图，判断是否需要调用工具（返回`need_tool: bool`）
- 实现`tool_selection_node`：根据意图从`ToolManager`获取可用工具，生成工具调用参数（符合工具Schema）
- 实现`should_continue_edge`：根据迭代次数、工具调用结果判断是否终止工作流（如`iteration_count ≥ max_steps`时终止）

#### 4.1.3 输出支持
- 同时支持非流式输出（完整结果返回）与流式输出（逐段返回，适配TUI实时显示）
- 流式输出时，支持“思考过程”与“最终结果”分离显示（通过`stream_type: "thought"/"result"`标识）

#### 4.1.4 异常检测
- 检测工具调用连续失败（如同一工具调用≥3次失败），触发`tool_failure`状态，提示LLM调整参数或切换工具
- 检测工作流死循环（如迭代次数≥`max_steps`且无有效进展），自动终止并返回异常信息
- 异常状态下，保留完整`AgentState`用于调试

### 4.2 工作流管理
#### 4.2.1 工作流定义
- 支持通过YAML配置定义工作流（参考原文档`react_workflow.yaml`格式），包含：
  - 工作流元信息（`name`、`description`、`max_steps`、`timeout`）
  - 节点配置（`id`、`type`、`config`，如`llm_call`/`tool_execution`/`condition_node`）
  - 边配置（`source`、`target`、`condition`，基于Jinja2表达式）
- 预实现3种核心工作流模式：
  1. ReAct模式（推理→工具调用→结果处理循环）
  2. Plan-and-Execute模式（先生成计划→分步执行计划）
  3. 人工审核模式（关键节点插入`human_approval`节点，等待用户确认）

#### 4.2.2 工作流执行
- 实现`WorkflowEngine`：加载YAML配置，生成LangGraph实例
- 支持工作流动态修改（运行时通过`add_node()`/`update_edge()`调整节点/边）
- 支持并行工具调用（利用LangGraph原生并行能力，通过`parallel=True`配置）

#### 4.2.3 状态管理
- 实现`StateManager`：负责`AgentState`的创建、更新、序列化/反序列化
- 支持状态快照（`create_snapshot(state: AgentState) -> str`），快照包含时间戳、关键状态字段
- 支持状态回滚（`rollback_to_snapshot(snapshot_id: str) -> AgentState`），用于调试错误场景

### 4.3 工作流监控与可视化
- 实现`WorkflowMonitor`：实时收集工作流执行数据（节点耗时、状态变化、工具调用记录）
- 支持生成Graphviz DOT文件（`export_graph(workflow_id: str) -> str`），可视化工作流结构
- TUI中通过Rich Live组件实时显示工作流状态（当前节点、剩余步骤、异常提示）

## 5. 非功能性需求
- **可扩展性**：新增工作流模式时，无需修改核心逻辑，只需实现新节点并配置YAML
- **性能**：单工作流节点执行耗时≤100ms（不含LLM/工具调用耗时）
- **可观测性**：工作流执行过程中，每步状态变化均通过`ILogger`记录（DEBUG级别）

## 6. 依赖接口
- `IConfigLoader`（基础架构模块）：加载工作流YAML配置
- `ILLMClient`（模型集成模块）：调用LLM完成推理与决策
- `IToolManager`（工具系统模块）：获取可用工具列表与Schema
- `IConfigSystem`（配置系统模块）：获取Agent上下文窗口、最大步骤等配置

## 7. 提供接口
- `IAgentCore`：Agent核心接口（`run(message: str, session_id: str) -> Union[Stream, str]`、`get_state(session_id: str) -> AgentState`）
- `IWorkflowEngine`：工作流引擎接口（`load_workflow(workflow_path: str) -> Workflow`、`execute_workflow(workflow: Workflow, state: AgentState) -> AgentState`）
- `IWorkflowMonitor`：监控接口（`get_execution_log(workflow_id: str) -> list[ExecutionEvent]`、`export_graph(workflow_id: str) -> str`）

## 8. 测试要点
- 工作流模式测试：验证ReAct、Plan-and-Execute模式的执行逻辑正确性
- 异常检测测试：工具连续失败、死循环场景的处理
- 上下文管理测试：上下文截断、会话恢复的完整性
- 并行工具调用测试：多工具同时调用的结果合并正确性
