# 文档7：过程记录与会话管理需求文档
## 1. 文档标识
- 模块名称：过程记录与会话管理
- 版本：V1.0
- 依赖模块：基础架构与环境配置、配置系统、Agent核心与工作流

## 2. 模块目标
实现Agent会话的全生命周期管理（创建、恢复、销毁）与过程记录（事件流、快照），支持会话持久化与回放，确保Agent行为可审计、可复现、可调试。

## 3. 技术栈
- 存储：JSON Lines（.jsonl，会话记录）、pickle（状态序列化）
- 版本控制：gitpython（文件操作检查点）
- 唯一标识：uuid（session_id生成）

## 4. 功能性需求
### 4.1 会话管理
#### 4.1.1 会话生命周期
- 实现`SessionManager`：
  - 会话创建：`create_session(agent_config_name: str) -> str`，生成唯一`session_id`（UUID4），初始化`AgentState`
  - 会话恢复：`restore_session(session_id: str) -> AgentState`，从存储加载历史状态
  - 会话销毁：`destroy_session(session_id: str) -> bool`，删除会话存储文件，释放资源
  - 会话列表：`list_sessions() -> list[SessionMeta]`，返回会话ID、创建时间、Agent配置名

#### 4.1.2 会话状态持久化
- 定义`ISessionStore`接口，支持可插拔存储后端，初期实现`FileSystemSessionStore`：
  - 存储路径：`sessions/{session_id}/`
  - 状态存储：`state.pkl`（序列化`AgentState`，支持pickle/json格式）
  - 元信息存储：`meta.json`（会话元信息：`session_id`、`agent_config`、`create_time`、`last_active_time`）
- 持久化时机：
  - 自动：工作流每步状态更新后，异步保存`AgentState`
  - 手动：支持`save_session(session_id: str, state: AgentState) -> None`手动触发

### 4.2 过程记录
#### 4.2.1 会话快照
- 会话创建时，生成配置快照：`config_snapshot.json`，记录最终生效的Agent配置（合并继承后的完整配置）
- 快照内容：包含LLM配置、工具列表、提示词引用、工作流配置，确保复现时环境一致

#### 4.2.2 事件流记录
- 实现`RecordCollector`：按时间顺序记录会话中的关键事件，存储为`events.jsonl`（每行一个事件）
- 支持5类事件，统一格式（`event_type`、`timestamp`、`data`）：
  1. `user_input`：用户输入消息（`data: {message: str}`）
  2. `state_transition`：状态转换（`data: {from_node: str, to_node: str, state_diff: dict}`）
  3. `llm_call`：LLM调用（`data: {prompt: list[dict], response: dict, token_usage: dict,耗时: float}`）
  4. `tool_call`：工具调用（`data: {tool_name: str, parameters: dict, output: str, error: str,耗时: float}`）
  5. `final_output`：最终输出（`data: {output: str, stream: bool}`）

#### 4.2.3 记录存储与脱敏
- 存储后端：与会话状态同路径（`sessions/{session_id}/events.jsonl`）
- 脱敏支持：提供`--redact`选项，生成脱敏记录（敏感信息如API Key、PII替换为`***`），用于分享/审计
- 记录分割：大文件自动分割（如`events_1.jsonl`、`events_2.jsonl`），单文件最大100MB

### 4.3 会话回放与恢复
#### 4.3.1 会话回放
- 实现`SessionPlayer`：
  - 加载记录：`load_session(session_id: str) -> list[Event]`，读取`events.jsonl`
  - 分步回放：`play_step_by_step() -> Generator[Event, None, None]`，逐事件回放，显示事件详情
  - 快速回放：`play_fast() -> None`，自动播放所有事件，输出关键节点（如LLM调用、工具结果）
- 回放时支持显示/隐藏敏感信息（通过`show_sensitive: bool`控制）

#### 4.3.2 会话恢复执行
- 支持从历史会话恢复后继续执行：`resume_session(session_id: str, new_message: str) -> Union[Stream, str]`
  - 加载历史`AgentState`，添加新用户消息
  - 启动工作流，从上次终止节点继续执行
- 恢复时保留历史事件记录，新事件追加到`events.jsonl`

### 4.4 Git版本管理（文件操作检查点）
- 实现`FileCheckpointManager`：
  - 检查点触发：仅当工具修改文件（创建/更新/删除）时，自动创建Git commit
  - 版本标签：每次工具调用后打标签，格式`tool_{tool_name}_{timestamp}`（如`tool_sql_tool_202405201430`）
  - 仓库初始化：会话启动时，在`workspace/{session_id}/`初始化Git仓库（若工具涉及文件操作）
- 支持查看文件修改历史：`list_file_changes(session_id: str, file_path: str) -> list[CommitInfo]`

## 5. 非功能性需求
- **可靠性**：会话状态保存失败时，不影响当前执行，仅记录警告日志
- **性能**：事件记录异步执行，不阻塞工作流主流程
- **可扩展性**：`ISessionStore`接口支持未来扩展到数据库（如PostgreSQL）

## 6. 依赖接口
- `IConfigSystem`（配置系统模块）：获取会话存储路径、Git检查点配置
- `IAgentCore`（Agent核心模块）：获取`AgentState`，启动工作流
- `ILogger`（日志与指标模块）：记录会话创建/恢复/销毁日志

## 7. 提供接口
- `ISessionManager`：会话管理接口（`create_session`/`restore_session`/`destroy_session`/`list_sessions`）
- `ISessionStore`：存储接口（`save_state`/`load_state`/`delete_session`）
- `IRecordCollector`：记录接口（`record_event`/`get_events`/`export_records`）
- `ISessionPlayer`：回放接口（`load_session`/`play_step_by_step`/`play_fast`）

## 8. 测试要点
- 会话生命周期测试：创建、恢复、销毁的正确性
- 事件记录测试：5类事件的完整性、时间顺序
- 回放测试：分步/快速回放的事件展示正确性
- Git检查点测试：文件修改时的commit、标签创建
