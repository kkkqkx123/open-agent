# 文档8：日志与指标需求文档
## 1. 文档标识
- 模块名称：日志与指标
- 版本：V1.0
- 依赖模块：基础架构与环境配置、配置系统

## 2. 模块目标
实现框架的日志管理与指标收集，支持分级日志、结构化输出、多目标输出，以及关键指标（LLM调用、工具调用）的统计，确保系统可观测、可调试、可审计。

## 3. 技术栈
- 日志：logging（Python原生）、python-json-logger（JSON格式化）
- 指标：prometheus-client（可选，未来扩展）、文本文件（初期实现）
- 脱敏：re（正则匹配敏感信息）

## 4. 功能性需求
### 4.1 日志服务
#### 4.1.1 分级日志
- 支持标准日志级别（DEBUG < INFO < WARNING < ERROR < CRITICAL），全局日志级别通过`global.yaml`配置（`log_level: INFO`）
- 模块级日志控制：支持为特定模块配置独立日志级别（如`agent.core: DEBUG`、`infrastructure.tools: WARNING`）

#### 4.1.2 多目标输出
- 支持同时输出到多个目标，配置控制：
  ```yaml
  log_outputs:
    - type: console  # 控制台输出
      level: INFO
      format: "text"  # 文本格式（开发环境）
    - type: file     # 文件输出
      level: DEBUG
      format: "json"  # JSON格式（生产环境）
      path: "logs/agent.log"
      rotation: "daily"  # 按天轮转
  ```
- 输出格式：
  - 文本格式：`[2024-05-20 14:30:00] [INFO] [agent.core] 会话123启动`
  - JSON格式：`{"timestamp": "2024-05-20T14:30:00Z", "level": "INFO", "module": "agent.core", "message": "会话123启动", "session_id": "123"}`

#### 4.1.3 智能脱敏
- 实现`LogRedactor`：
  - 预定义脱敏规则：API Key（`sk-.*`）、邮箱（`\w+@\w+\.\w+`）、手机号（`1\d{10}`）
  - 自定义规则：通过`global.yaml`的`secret_patterns`配置（正则表达式）
  - 上下文感知：DEBUG级别保留完整信息（调试用），INFO及以上级别脱敏

### 4.2 指标记录
#### 4.2.1 核心指标定义
- 收集4类关键指标，初期存储为`metrics/{session_id}/stats.json`，格式如下：
  ```json
  {
    "agent_requests_total": 10,  # 总请求数
    "agent_requests_success": 8, # 成功请求数
    "llm_calls": [
      {"model": "gpt-4-turbo", "count": 5, "input_tokens": 2000, "output_tokens": 1500, "total_time": 10.5}
    ],
    "tool_calls": [
      {"tool": "search_tool", "count": 3, "success_count": 3, "total_time": 4.2},
      {"tool": "sql_tool", "count": 2, "success_count": 1, "total_time": 3.8}
    ],
    "session_duration": 300  # 会话总时长（秒）
  }
  ```

#### 4.2.2 指标收集时机
- LLM指标：`LLMCallHook.post_call`中收集（调用次数、Token数、耗时）
- 工具指标：`ToolExecutor.execute`后收集（调用次数、成功率、耗时）
- 会话指标：会话销毁时统计（总时长、请求数）

#### 4.2.3 指标输出与扩展
- 初期输出：文本文件（`stats.json`），会话结束时生成
- 未来扩展：实现`PrometheusMetricsCollector`，支持对接Prometheus，暴露`/metrics`接口（预留接口）

### 4.3 全局错误处理
- 实现`GlobalErrorHandler`：
  - 错误分类：
    1. 用户错误（配置错误、参数无效）：返回用户友好提示，记录WARNING日志
    2. 系统错误（LLM调用失败、工具超时）：返回重试建议，记录ERROR日志
    3. 致命错误（内存不足、配置文件损坏）：返回终止提示，记录CRITICAL日志
  - 错误捕获：通过装饰器`@error_handler`包装应用服务层方法，统一捕获异常
  - 错误反馈：TUI中显示彩色错误提示（如红色ERROR、黄色WARNING），不暴露堆栈信息

## 5. 非功能性需求
- **性能**：日志记录、指标收集不阻塞主流程（异步执行）
- **可配置性**：日志级别、输出目标、脱敏规则均可通过配置修改
- **兼容性**：JSON日志格式兼容主流日志分析工具（如ELK）

## 6. 依赖接口
- `IConfigSystem`（配置系统模块）：获取日志级别、输出配置、脱敏规则
- `IConfigLoader`（基础架构模块）：加载日志配置

## 7. 提供接口
- `ILogger`：日志接口（`debug`/`info`/`warning`/`error`/`critical`，支持额外字段如`session_id`）
- `IMetricsCollector`：指标接口（`record_llm_metric`/`record_tool_metric`/`export_stats`）
- `IGlobalErrorHandler`：错误处理接口（`handle_error`/`register_error_handler`）

## 8. 测试要点
- 日志级别测试：不同级别日志的输出控制
- 脱敏测试：API Key、邮箱、手机号的脱敏正确性
- 指标统计测试：LLM/工具调用的指标准确性
- 错误处理测试：不同类型错误的捕获与反馈
